{"version":3,"file":"emotion-react.esm.js","sources":["../src/utils.js","../src/context.js","../src/isolated-hoist-non-react-statics-do-not-use-this-in-your-code.js","../src/theming.js","../src/emotion-element.js","../src/jsx.js","../src/global.js","../src/css.js","../src/keyframes.js","../src/class-names.js","../src/index.js"],"sourcesContent":["// @flow\nexport let isBrowser = typeof document !== 'undefined'\n\nexport const hasOwnProperty = Object.prototype.hasOwnProperty\n","// @flow\nimport { type EmotionCache } from '@emotion/utils'\nimport * as React from 'react'\nimport { useContext, forwardRef } from 'react'\nimport createCache from '@emotion/cache'\nimport { isBrowser } from './utils'\n\nlet EmotionCacheContext: React.Context<EmotionCache | null> = /* #__PURE__ */ React.createContext(\n  // we're doing this to avoid preconstruct's dead code elimination in this one case\n  // because this module is primarily intended for the browser and node\n  // but it's also required in react native and similar environments sometimes\n  // and we could have a special build just for that\n  // but this is much easier and the native packages\n  // might use a different theme context in the future anyway\n  typeof HTMLElement !== 'undefined'\n    ? /* #__PURE__ */ createCache({ key: 'css' })\n    : null\n)\n\nexport let CacheProvider = EmotionCacheContext.Provider\n\nlet withEmotionCache = function withEmotionCache<Props, Ref: React.Ref<*>>(\n  func: (props: Props, cache: EmotionCache, ref: Ref) => React.Node\n): React.AbstractComponent<Props> {\n  // $FlowFixMe\n  return forwardRef((props: Props, ref: Ref) => {\n    // the cache will never be null in the browser\n    let cache = ((useContext(EmotionCacheContext): any): EmotionCache)\n\n    return func(props, cache, ref)\n  })\n}\n\nif (!isBrowser) {\n  withEmotionCache = function withEmotionCache<Props>(\n    func: (props: Props, cache: EmotionCache) => React.Node\n  ): React.StatelessFunctionalComponent<Props> {\n    return (props: Props) => {\n      let cache = useContext(EmotionCacheContext)\n      if (cache === null) {\n        // yes, we're potentially creating this on every render\n        // it doesn't actually matter though since it's only on the server\n        // so there will only every be a single render\n        // that could change in the future because of suspense and etc. but for now,\n        // this works and i don't want to optimise for a future thing that we aren't sure about\n        cache = createCache({ key: 'css' })\n        return (\n          <EmotionCacheContext.Provider value={cache}>\n            {func(props, cache)}\n          </EmotionCacheContext.Provider>\n        )\n      } else {\n        return func(props, cache)\n      }\n    }\n  }\n}\n\nexport { withEmotionCache }\n","// this file isolates this package that is not tree-shakeable\n// and allows it to be dropped - if it stays unused\n// it happens thanks to sideEffects: false in our package.json\nimport hoistNonReactStatics from 'hoist-non-react-statics'\n\n// have to wrap it in a proxy function because Rollup is too damn smart\n// and if this module doesn't actually contain any logic of its own\n// then Rollup just use 'hoist-non-react-statics' directly in other chunks\nexport default (targetComponent, sourceComponent) =>\n  hoistNonReactStatics(targetComponent, sourceComponent)\n","// @flow\nimport * as React from 'react'\nimport weakMemoize from '@emotion/weak-memoize'\nimport hoistNonReactStatics from './isolated-hoist-non-react-statics-do-not-use-this-in-your-code'\n\nexport const ThemeContext = /* #__PURE__ */ React.createContext<Object>({})\n\nexport const useTheme = () => React.useContext(ThemeContext)\n\nconst getTheme = (outerTheme: Object, theme: Object | ((Object) => Object)) => {\n  if (typeof theme === 'function') {\n    const mergedTheme = theme(outerTheme)\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      (mergedTheme == null ||\n        typeof mergedTheme !== 'object' ||\n        Array.isArray(mergedTheme))\n    ) {\n      throw new Error(\n        '[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!'\n      )\n    }\n    return mergedTheme\n  }\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    (theme == null || typeof theme !== 'object' || Array.isArray(theme))\n  ) {\n    throw new Error(\n      '[ThemeProvider] Please make your theme prop a plain object'\n    )\n  }\n\n  return { ...outerTheme, ...theme }\n}\n\nlet createCacheWithTheme = /* #__PURE__ */ weakMemoize((outerTheme) => {\n  return weakMemoize((theme) => {\n    return getTheme(outerTheme, theme)\n  })\n})\n\ntype ThemeProviderProps = {\n  theme: Object | ((Object) => Object),\n  children: React.Node,\n}\n\nexport const ThemeProvider = (props: ThemeProviderProps) => {\n  let theme = React.useContext(ThemeContext)\n\n  if (props.theme !== theme) {\n    theme = createCacheWithTheme(theme)(props.theme)\n  }\n  return (\n    <ThemeContext.Provider value={theme}>\n      {props.children}\n    </ThemeContext.Provider>\n  )\n}\n\nexport function withTheme<Config: {}>(\n  Component: React.AbstractComponent<Config>\n): React.AbstractComponent<$Diff<Config, { theme: Object }>> {\n  const componentName = Component.displayName || Component.name || 'Component'\n  let render = (props, ref) => {\n    let theme = React.useContext(ThemeContext)\n\n    return <Component theme={theme} ref={ref} {...props} />\n  }\n  // $FlowFixMe\n  let WithTheme = React.forwardRef(render)\n\n  WithTheme.displayName = `WithTheme(${componentName})`\n\n  return hoistNonReactStatics(WithTheme, Component)\n}\n","// @flow\nimport * as React from 'react'\nimport { withEmotionCache } from './context'\nimport { ThemeContext } from './theming'\nimport { getRegisteredStyles, insertStyles } from '@emotion/utils'\nimport { hasOwnProperty, isBrowser } from './utils'\nimport { serializeStyles } from '@emotion/serialize'\n\n// those identifiers come from error stacks, so they have to be valid JS identifiers\n// thus we only need to replace what is a valid character for JS, but not for CSS\nconst sanitizeIdentifier = (identifier: string) =>\n  identifier.replace(/\\$/g, '-')\n\nlet typePropName = '__EMOTION_TYPE_PLEASE_DO_NOT_USE__'\n\nlet labelPropName = '__EMOTION_LABEL_PLEASE_DO_NOT_USE__'\n\nexport const createEmotionProps = (type: React.ElementType, props: Object) => {\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    typeof props.css === 'string' &&\n    // check if there is a css declaration\n    props.css.indexOf(':') !== -1\n  ) {\n    throw new Error(\n      `Strings are not allowed as css prop values, please wrap it in a css template literal from '@emotion/react' like this: css\\`${props.css}\\``\n    )\n  }\n\n  let newProps: any = {}\n\n  for (let key in props) {\n    if (hasOwnProperty.call(props, key)) {\n      newProps[key] = props[key]\n    }\n  }\n\n  newProps[typePropName] = type\n\n  if (process.env.NODE_ENV !== 'production') {\n    const error = new Error()\n    if (error.stack) {\n      // chrome\n      let match = error.stack.match(\n        /at (?:Object\\.|Module\\.|)(?:jsx|createEmotionProps).*\\n\\s+at (?:Object\\.|)([A-Z][A-Za-z0-9$]+) /\n      )\n      if (!match) {\n        // safari and firefox\n        match = error.stack.match(/.*\\n([A-Z][A-Za-z0-9$]+)@/)\n      }\n      if (match) {\n        newProps[labelPropName] = sanitizeIdentifier(match[1])\n      }\n    }\n  }\n\n  return newProps\n}\n\nlet Emotion = /* #__PURE__ */ withEmotionCache<any, any>(\n  (props, cache, ref) => {\n    let cssProp = props.css\n\n    // so that using `css` from `emotion` and passing the result to the css prop works\n    // not passing the registered cache to serializeStyles because it would\n    // make certain babel optimisations not possible\n    if (\n      typeof cssProp === 'string' &&\n      cache.registered[cssProp] !== undefined\n    ) {\n      cssProp = cache.registered[cssProp]\n    }\n\n    let type = props[typePropName]\n    let registeredStyles = [cssProp]\n    let className = ''\n\n    if (typeof props.className === 'string') {\n      className = getRegisteredStyles(\n        cache.registered,\n        registeredStyles,\n        props.className\n      )\n    } else if (props.className != null) {\n      className = `${props.className} `\n    }\n\n    let serialized = serializeStyles(\n      registeredStyles,\n      undefined,\n      typeof cssProp === 'function' || Array.isArray(cssProp)\n        ? React.useContext(ThemeContext)\n        : undefined\n    )\n\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      serialized.name.indexOf('-') === -1\n    ) {\n      let labelFromStack = props[labelPropName]\n      if (labelFromStack) {\n        serialized = serializeStyles([\n          serialized,\n          'label:' + labelFromStack + ';',\n        ])\n      }\n    }\n    const rules = insertStyles(cache, serialized, typeof type === 'string')\n    className += `${cache.key}-${serialized.name}`\n\n    const newProps = {}\n    for (let key in props) {\n      if (\n        hasOwnProperty.call(props, key) &&\n        key !== 'css' &&\n        key !== typePropName &&\n        (process.env.NODE_ENV === 'production' || key !== labelPropName)\n      ) {\n        newProps[key] = props[key]\n      }\n    }\n    newProps.ref = ref\n    newProps.className = className\n\n    const ele = React.createElement(type, newProps)\n    if (!isBrowser && rules !== undefined) {\n      let serializedNames = serialized.name\n      let next = serialized.next\n      while (next !== undefined) {\n        serializedNames += ' ' + next.name\n        next = next.next\n      }\n      return (\n        <>\n          <style\n            {...{\n              [`data-emotion`]: `${cache.key} ${serializedNames}`,\n              dangerouslySetInnerHTML: { __html: rules },\n              nonce: cache.sheet.nonce,\n            }}\n          />\n          {ele}\n        </>\n      )\n    }\n    return ele\n  }\n)\n\nif (process.env.NODE_ENV !== 'production') {\n  Emotion.displayName = 'EmotionCssPropInternal'\n}\n\nexport default Emotion\n","// @flow\nimport * as React from 'react'\nimport Emotion, { createEmotionProps } from './emotion-element'\nimport { hasOwnProperty } from './utils'\n\n// $FlowFixMe\nexport const jsx: typeof React.createElement = function (\n  type: React.ElementType,\n  props: Object\n) {\n  let args = arguments\n\n  if (props == null || !hasOwnProperty.call(props, 'css')) {\n    // $FlowFixMe\n    return React.createElement.apply(undefined, args)\n  }\n\n  let argsLength = args.length\n  let createElementArgArray = new Array(argsLength)\n  createElementArgArray[0] = Emotion\n  createElementArgArray[1] = createEmotionProps(type, props)\n\n  for (let i = 2; i < argsLength; i++) {\n    createElementArgArray[i] = args[i]\n  }\n\n  // $FlowFixMe\n  return React.createElement.apply(null, createElementArgArray)\n}\n","// @flow\nimport * as React from 'react'\nimport { withEmotionCache } from './context'\nimport { ThemeContext } from './theming'\nimport { insertStyles } from '@emotion/utils'\nimport { isBrowser } from './utils'\n\nimport { StyleSheet } from '@emotion/sheet'\nimport { serializeStyles } from '@emotion/serialize'\n\ntype Styles = Object | Array<Object>\n\ntype GlobalProps = {\n  +styles: Styles | ((Object) => Styles),\n}\n\nlet warnedAboutCssPropForGlobal = false\n\n// maintain place over rerenders.\n// initial render from browser, insertBefore context.sheet.tags[0] or if a style hasn't been inserted there yet, appendChild\n// initial client-side render from SSR, use place of hydrating tag\n\nexport let Global: React.AbstractComponent<GlobalProps> = /* #__PURE__ */ withEmotionCache(\n  (props: GlobalProps, cache) => {\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      !warnedAboutCssPropForGlobal && // check for className as well since the user is\n      // probably using the custom createElement which\n      // means it will be turned into a className prop\n      // $FlowFixMe I don't really want to add it to the type since it shouldn't be used\n      (props.className || props.css)\n    ) {\n      console.error(\n        \"It looks like you're using the css prop on Global, did you mean to use the styles prop instead?\"\n      )\n      warnedAboutCssPropForGlobal = true\n    }\n    let styles = props.styles\n\n    let serialized = serializeStyles(\n      [styles],\n      undefined,\n      typeof styles === 'function' || Array.isArray(styles)\n        ? React.useContext(ThemeContext)\n        : undefined\n    )\n\n    if (!isBrowser) {\n      let serializedNames = serialized.name\n      let serializedStyles = serialized.styles\n      let next = serialized.next\n      while (next !== undefined) {\n        serializedNames += ' ' + next.name\n        serializedStyles += next.styles\n        next = next.next\n      }\n\n      let shouldCache = cache.compat === true\n\n      let rules = cache.insert(\n        ``,\n        { name: serializedNames, styles: serializedStyles },\n        cache.sheet,\n        shouldCache\n      )\n\n      if (shouldCache) {\n        return null\n      }\n\n      return (\n        <style\n          {...{\n            [`data-emotion`]: `${cache.key}-global ${serializedNames}`,\n            dangerouslySetInnerHTML: { __html: rules },\n            nonce: cache.sheet.nonce,\n          }}\n        />\n      )\n    }\n\n    // yes, i know these hooks are used conditionally\n    // but it is based on a constant that will never change at runtime\n    // it's effectively like having two implementations and switching them out\n    // so it's not actually breaking anything\n\n    let sheetRef = React.useRef()\n\n    React.useLayoutEffect(() => {\n      const key = `${cache.key}-global`\n\n      let sheet = new StyleSheet({\n        key,\n        nonce: cache.sheet.nonce,\n        container: cache.sheet.container,\n        speedy: cache.sheet.isSpeedy,\n      })\n      // $FlowFixMe\n      let node: HTMLStyleElement | null = document.querySelector(\n        `style[data-emotion=\"${key} ${serialized.name}\"]`\n      )\n\n      if (cache.sheet.tags.length) {\n        sheet.before = cache.sheet.tags[0]\n      }\n      if (node !== null) {\n        sheet.hydrate([node])\n      }\n      sheetRef.current = sheet\n      return () => {\n        sheet.flush()\n      }\n    }, [cache])\n\n    React.useLayoutEffect(() => {\n      if (serialized.next !== undefined) {\n        // insert keyframes\n        insertStyles(cache, serialized.next, true)\n      }\n      let sheet: StyleSheet = ((sheetRef.current: any): StyleSheet)\n      if (sheet.tags.length) {\n        // if this doesn't exist then it will be null so the style element will be appended\n        let element = sheet.tags[sheet.tags.length - 1].nextElementSibling\n        sheet.before = ((element: any): Element | null)\n        sheet.flush()\n      }\n      cache.insert(``, serialized, sheet, false)\n    }, [cache, serialized.name])\n\n    return null\n  }\n)\n\nif (process.env.NODE_ENV !== 'production') {\n  Global.displayName = 'EmotionGlobal'\n}\n","// @flow\n\nimport type { Interpolation, SerializedStyles } from '@emotion/utils'\nimport { serializeStyles } from '@emotion/serialize'\n\nfunction css(...args: Array<Interpolation>): SerializedStyles {\n  return serializeStyles(args)\n}\n\nexport default css\n","// @flow\nimport css from './css'\n\ntype Keyframes = {|\n  name: string,\n  styles: string,\n  anim: 1,\n  toString: () => string,\n|} & string\n\nexport const keyframes = (...args: *): Keyframes => {\n  let insertable = css(...args)\n  const name = `animation-${insertable.name}`\n  // $FlowFixMe\n  return {\n    name,\n    styles: `@keyframes ${name}{${insertable.styles}}`,\n    anim: 1,\n    toString() {\n      return `_EMO_${this.name}_${this.styles}_EMO_`\n    },\n  }\n}\n","// @flow\nimport * as React from 'react'\nimport { getRegisteredStyles, insertStyles } from '@emotion/utils'\nimport { serializeStyles } from '@emotion/serialize'\nimport { withEmotionCache } from './context'\nimport { ThemeContext } from './theming'\nimport { isBrowser } from './utils'\n\ntype ClassNameArg =\n  | string\n  | boolean\n  | { [key: string]: boolean }\n  | Array<ClassNameArg>\n  | null\n  | void\n\nlet classnames = (args: Array<ClassNameArg>): string => {\n  let len = args.length\n  let i = 0\n  let cls = ''\n  for (; i < len; i++) {\n    let arg = args[i]\n    if (arg == null) continue\n\n    let toAdd\n    switch (typeof arg) {\n      case 'boolean':\n        break\n      case 'object': {\n        if (Array.isArray(arg)) {\n          toAdd = classnames(arg)\n        } else {\n          if (\n            process.env.NODE_ENV !== 'production' &&\n            arg.styles !== undefined &&\n            arg.name !== undefined\n          ) {\n            console.error(\n              'You have passed styles created with `css` from `@emotion/react` package to the `cx`.\\n' +\n                '`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.'\n            )\n          }\n          toAdd = ''\n          for (const k in arg) {\n            if (arg[k] && k) {\n              toAdd && (toAdd += ' ')\n              toAdd += k\n            }\n          }\n        }\n        break\n      }\n      default: {\n        toAdd = arg\n      }\n    }\n    if (toAdd) {\n      cls && (cls += ' ')\n      cls += toAdd\n    }\n  }\n  return cls\n}\nfunction merge(\n  registered: Object,\n  css: (...args: Array<any>) => string,\n  className: string\n) {\n  const registeredStyles = []\n\n  const rawClassName = getRegisteredStyles(\n    registered,\n    registeredStyles,\n    className\n  )\n\n  if (registeredStyles.length < 2) {\n    return className\n  }\n  return rawClassName + css(registeredStyles)\n}\n\ntype Props = {\n  children: ({\n    css: (...args: any) => string,\n    cx: (...args: Array<ClassNameArg>) => string,\n    theme: Object,\n  }) => React.Node,\n}\n\nexport const ClassNames: React.AbstractComponent<Props> = /* #__PURE__ */ withEmotionCache(\n  (props, cache) => {\n    let rules = ''\n    let serializedHashes = ''\n    let hasRendered = false\n\n    let css = (...args: Array<any>) => {\n      if (hasRendered && process.env.NODE_ENV !== 'production') {\n        throw new Error('css can only be used during render')\n      }\n      let serialized = serializeStyles(args, cache.registered)\n      if (isBrowser) {\n        insertStyles(cache, serialized, false)\n      } else {\n        let res = insertStyles(cache, serialized, false)\n        if (res !== undefined) {\n          rules += res\n        }\n      }\n      if (!isBrowser) {\n        serializedHashes += ` ${serialized.name}`\n      }\n      return `${cache.key}-${serialized.name}`\n    }\n    let cx = (...args: Array<ClassNameArg>) => {\n      if (hasRendered && process.env.NODE_ENV !== 'production') {\n        throw new Error('cx can only be used during render')\n      }\n      return merge(cache.registered, css, classnames(args))\n    }\n    let content = {\n      css,\n      cx,\n      theme: React.useContext(ThemeContext),\n    }\n    let ele = props.children(content)\n    hasRendered = true\n    if (!isBrowser && rules.length !== 0) {\n      return (\n        <>\n          <style\n            {...{\n              [`data-emotion`]: `${cache.key} ${serializedHashes.substring(1)}`,\n              dangerouslySetInnerHTML: { __html: rules },\n              nonce: cache.sheet.nonce,\n            }}\n          />\n          {ele}\n        </>\n      )\n    }\n    return ele\n  }\n)\n\nif (process.env.NODE_ENV !== 'production') {\n  ClassNames.displayName = 'EmotionClassNames'\n}\n","// @flow\nimport pkg from '../package.json'\nexport { CacheProvider, withEmotionCache } from './context'\nexport { jsx } from './jsx'\nexport { jsx as createElement } from './jsx'\nexport { Global } from './global'\nexport { keyframes } from './keyframes'\nexport { ClassNames } from './class-names'\nexport { ThemeContext, ThemeProvider, useTheme, withTheme } from './theming'\nexport { default as css } from './css'\n\nif (process.env.NODE_ENV !== 'production') {\n  const isBrowser = typeof document !== 'undefined'\n  // #1727 for some reason Jest evaluates modules twice if some consuming module gets mocked with jest.mock\n  const isJest = typeof jest !== 'undefined'\n\n  if (isBrowser && !isJest) {\n    const globalContext = isBrowser ? window : global\n    const globalKey = `__EMOTION_REACT_${pkg.version.split('.')[0]}__`\n    if (globalContext[globalKey]) {\n      console.warn(\n        'You are loading @emotion/react when it is already loaded. Running ' +\n          'multiple instances may cause problems. This can happen if multiple ' +\n          'versions are used, or if multiple builds of the same version are ' +\n          'used.'\n      )\n    }\n    globalContext[globalKey] = true\n  }\n}\n"],"names":["isBrowser","document","hasOwnProperty","Object","prototype","EmotionCacheContext","React","HTMLElement","createCache","key","CacheProvider","Provider","withEmotionCache","func","forwardRef","props","ref","cache","useContext","value","ThemeContext","useTheme","createCacheWithTheme","weakMemoize","outerTheme","theme","mergedTheme","process","env","NODE_ENV","Array","isArray","Error","getTheme","ThemeProvider","children","withTheme","Component","componentName","displayName","name","WithTheme","hoistNonReactStatics","typePropName","labelPropName","createEmotionProps","type","css","indexOf","newProps","call","error","stack","match","replace","Emotion","cssProp","undefined","registered","registeredStyles","className","getRegisteredStyles","serialized","serializeStyles","labelFromStack","rules","insertStyles","ele","serializedNames","next","h","dangerouslySetInnerHTML","__html","nonce","sheet","jsx","args","arguments","apply","argsLength","length","createElementArgArray","i","warnedAboutCssPropForGlobal","Global","console","styles","serializedStyles","shouldCache","compat","insert","sheetRef","StyleSheet","container","speedy","isSpeedy","node","querySelector","tags","before","hydrate","current","flush","nextElementSibling","keyframes","insertable","anim","toString","this","classnames","len","cls","arg","toAdd","k","merge","rawClassName","ClassNames","serializedHashes","hasRendered","res","content","cx","substring","isJest","jest","globalContext","window","global","globalKey","split","warn"],"mappings":"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"}
{"version":3,"file":"emotion-cache.modern.js","sources":["../src/stylis-plugins.js","../src/index.js"],"sourcesContent":["import {\n  compile,\n  alloc,\n  dealloc,\n  next,\n  delimit,\n  token,\n  char,\n  from,\n  identifier,\n  peek,\n  position,\n} from 'stylis'\n\nconst last = (arr) => (arr.length ? arr[arr.length - 1] : null)\n\nconst toRules = (parsed, points) => {\n  // pretend we've started with a comma\n  let index = -1\n  let character = 44\n\n  do {\n    switch (token(character)) {\n      case 0:\n        // &\\f\n        if (character === 38 && peek() === 12) {\n          // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings\n          // stylis inserts \\f after & to know when & where it should replace this sequence with the context selector\n          // and when it should just concatenate the outer and inner selectors\n          // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here\n          points[index] = 1\n        }\n        parsed[index] += identifier(position - 1)\n        break\n      case 2:\n        parsed[index] += delimit(character)\n        break\n      case 4:\n        // comma\n        if (character === 44) {\n          // colon\n          parsed[++index] = peek() === 58 ? '&\\f' : ''\n          points[index] = parsed[index].length\n          break\n        }\n      // fallthrough\n      default:\n        parsed[index] += from(character)\n    }\n  } while ((character = next()))\n\n  return parsed\n}\n\nconst getRules = (value, points) => dealloc(toRules(alloc(value), points))\n\n// WeakSet would be more appropriate, but only WeakMap is supported in IE11\nconst fixedElements = /* #__PURE__ */ new WeakMap()\n\nexport let compat = (element) => {\n  if (\n    element.type !== 'rule' ||\n    !element.parent ||\n    // .length indicates if this rule contains pseudo or not\n    !element.length\n  ) {\n    return\n  }\n\n  let { value, parent } = element\n  let isImplicitRule =\n    element.column === parent.column && element.line === parent.line\n\n  while (parent.type !== 'rule') {\n    parent = parent.parent\n    if (!parent) return\n  }\n\n  // short-circuit for the simplest case\n  if (\n    element.props.length === 1 &&\n    value.charCodeAt(0) !== 58 /* colon */ &&\n    !fixedElements.get(parent)\n  ) {\n    return\n  }\n\n  // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)\n  // then the props has already been manipulated beforehand as they that array is shared between it and its \"rule parent\"\n  if (isImplicitRule) {\n    return\n  }\n\n  fixedElements.set(element, true)\n\n  const points = []\n  const rules = getRules(value, points)\n  const parentRules = parent.props\n\n  for (let i = 0, k = 0; i < rules.length; i++) {\n    for (let j = 0; j < parentRules.length; j++, k++) {\n      element.props[k] = points[i]\n        ? rules[i].replace(/&\\f/g, parentRules[j])\n        : `${parentRules[j]} ${rules[i]}`\n    }\n  }\n}\n\nexport let removeLabel = (element) => {\n  if (element.type === 'decl') {\n    var value = element.value\n    if (\n      // charcode for l\n      value.charCodeAt(0) === 108 &&\n      // charcode for b\n      value.charCodeAt(2) === 98\n    ) {\n      // this ignores label\n      element.return = ''\n      element.value = ''\n    }\n  }\n}\n\nconst ignoreFlag =\n  'emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason'\n\nconst isIgnoringComment = (element) =>\n  !!element &&\n  element.type === 'comm' &&\n  element.children.indexOf(ignoreFlag) > -1\n\nexport let createUnsafeSelectorsAlarm = (cache) => (\n  element,\n  index,\n  children\n) => {\n  if (element.type !== 'rule') return\n\n  const unsafePseudoClasses = element.value.match(\n    /(:first|:nth|:nth-last)-child/g\n  )\n\n  if (unsafePseudoClasses && cache.compat !== true) {\n    const prevElement = index > 0 ? children[index - 1] : null\n    if (prevElement && isIgnoringComment(last(prevElement.children))) {\n      return\n    }\n    unsafePseudoClasses.forEach((unsafePseudoClass) => {\n      console.error(\n        `The pseudo class \"${unsafePseudoClass}\" is potentially unsafe when doing server-side rendering. Try changing it to \"${\n          unsafePseudoClass.split('-child')[0]\n        }-of-type\".`\n      )\n    })\n  }\n}\n\nlet isImportRule = (element) =>\n  element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64\n\nconst isPrependedWithRegularRules = (index, children) => {\n  for (let i = index - 1; i >= 0; i--) {\n    if (!isImportRule(children[i])) {\n      return true\n    }\n  }\n  return false\n}\n\n// use this to remove incorrect elements from further processing\n// so they don't get handed to the `sheet` (or anything else)\n// as that could potentially lead to additional logs which in turn could be overhelming to the user\nconst nullifyElement = (element) => {\n  element.type = ''\n  element.value = ''\n  element.return = ''\n  element.children = ''\n  element.props = ''\n}\n\nexport let incorrectImportAlarm = (element, index, children) => {\n  if (!isImportRule(element)) {\n    return\n  }\n\n  if (element.parent) {\n    console.error(\n      \"`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.\"\n    )\n    nullifyElement(element)\n  } else if (isPrependedWithRegularRules(index, children)) {\n    console.error(\n      \"`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.\"\n    )\n    nullifyElement(element)\n  }\n}\n","// @flow\nimport { StyleSheet } from '@emotion/sheet'\nimport { type EmotionCache, type SerializedStyles } from '@emotion/utils'\nimport {\n  serialize,\n  compile,\n  middleware,\n  rulesheet,\n  stringify,\n  prefixer,\n  COMMENT,\n} from 'stylis'\nimport weakMemoize from '@emotion/weak-memoize'\nimport memoize from '@emotion/memoize'\nimport {\n  compat,\n  removeLabel,\n  createUnsafeSelectorsAlarm,\n  incorrectImportAlarm,\n} from './stylis-plugins'\nimport type { StylisPlugin } from './types'\n\nlet isBrowser = typeof document !== 'undefined'\n\nexport type Options = {\n  nonce?: string,\n  stylisPlugins?: StylisPlugin[],\n  key: string,\n  container?: HTMLElement,\n  speedy?: boolean,\n  prepend?: boolean,\n}\n\nlet getServerStylisCache = isBrowser\n  ? undefined\n  : weakMemoize(() =>\n      memoize(() => {\n        let cache = {}\n        return (name) => cache[name]\n      })\n    )\n\nconst defaultStylisPlugins = [prefixer]\n\nlet createCache = (options: Options): EmotionCache => {\n  let key = options.key\n\n  if (process.env.NODE_ENV !== 'production' && !key) {\n    throw new Error(\n      \"You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\\n\" +\n        `If multiple caches share the same key they might \"fight\" for each other's style elements.`\n    )\n  }\n\n  if (isBrowser && key === 'css') {\n    const ssrStyles = document.querySelectorAll(\n      `style[data-emotion]:not([data-s])`\n    )\n    // get SSRed styles out of the way of React's hydration\n    // document.head is a safe place to move them to\n    Array.prototype.forEach.call(ssrStyles, (node: HTMLStyleElement) => {\n      ;((document.head: any): HTMLHeadElement).appendChild(node)\n      node.setAttribute('data-s', '')\n    })\n  }\n\n  const stylisPlugins = options.stylisPlugins || defaultStylisPlugins\n\n  if (process.env.NODE_ENV !== 'production') {\n    // $FlowFixMe\n    if (/[^a-z-]/.test(key)) {\n      throw new Error(\n        `Emotion key must only contain lower case alphabetical characters and - but \"${key}\" was passed`\n      )\n    }\n  }\n  let inserted = {}\n  // $FlowFixMe\n  let container: HTMLElement\n  const nodesToHydrate = []\n  if (isBrowser) {\n    container = options.container || ((document.head: any): HTMLHeadElement)\n\n    Array.prototype.forEach.call(\n      document.querySelectorAll(`style[data-emotion]`),\n      (node: HTMLStyleElement) => {\n        const attrib = ((node.getAttribute(`data-emotion`): any): string).split(\n          ' '\n        )\n        if (attrib[0] !== key) {\n          return\n        }\n        // $FlowFixMe\n        for (let i = 1; i < attrib.length; i++) {\n          inserted[attrib[i]] = true\n        }\n        nodesToHydrate.push(node)\n      }\n    )\n  }\n\n  let insert: (\n    selector: string,\n    serialized: SerializedStyles,\n    sheet: StyleSheet,\n    shouldCache: boolean\n  ) => string | void\n\n  const omnipresentPlugins = [compat, removeLabel]\n\n  if (process.env.NODE_ENV !== 'production') {\n    omnipresentPlugins.push(\n      createUnsafeSelectorsAlarm({\n        get compat() {\n          return cache.compat\n        },\n      }),\n      incorrectImportAlarm\n    )\n  }\n\n  if (isBrowser) {\n    let currentSheet\n\n    const finalizingPlugins = [\n      stringify,\n      process.env.NODE_ENV !== 'production'\n        ? (element) => {\n            if (!element.root) {\n              if (element.return) {\n                currentSheet.insert(element.return)\n              } else if (element.value && element.type !== COMMENT) {\n                // insert empty rule in non-production environments\n                // so @emotion/jest can grab `key` from the (JS)DOM for caches without any rules inserted yet\n                currentSheet.insert(`${element.value}{}`)\n              }\n            }\n          }\n        : rulesheet((rule) => {\n            currentSheet.insert(rule)\n          }),\n    ]\n\n    const serializer = middleware(\n      omnipresentPlugins.concat(stylisPlugins, finalizingPlugins)\n    )\n    const stylis = (styles) => serialize(compile(styles), serializer)\n\n    insert = (\n      selector: string,\n      serialized: SerializedStyles,\n      sheet: StyleSheet,\n      shouldCache: boolean\n    ): void => {\n      currentSheet = sheet\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        serialized.map !== undefined\n      ) {\n        currentSheet = {\n          insert: (rule: string) => {\n            sheet.insert(rule + ((serialized.map: any): string))\n          },\n        }\n      }\n\n      stylis(selector ? `${selector}{${serialized.styles}}` : serialized.styles)\n\n      if (shouldCache) {\n        cache.inserted[serialized.name] = true\n      }\n    }\n  } else {\n    const finalizingPlugins = [stringify]\n    const serializer = middleware(\n      omnipresentPlugins.concat(stylisPlugins, finalizingPlugins)\n    )\n    const stylis = (styles) => serialize(compile(styles), serializer)\n\n    // $FlowFixMe\n    let serverStylisCache = getServerStylisCache(stylisPlugins)(key)\n    let getRules = (selector: string, serialized: SerializedStyles): string => {\n      let name = serialized.name\n      if (serverStylisCache[name] === undefined) {\n        serverStylisCache[name] = stylis(\n          selector ? `${selector}{${serialized.styles}}` : serialized.styles\n        )\n      }\n      return serverStylisCache[name]\n    }\n    insert = (\n      selector: string,\n      serialized: SerializedStyles,\n      sheet: StyleSheet,\n      shouldCache: boolean\n    ): string | void => {\n      let name = serialized.name\n      let rules = getRules(selector, serialized)\n      if (cache.compat === undefined) {\n        // in regular mode, we don't set the styles on the inserted cache\n        // since we don't need to and that would be wasting memory\n        // we return them so that they are rendered in a style tag\n        if (shouldCache) {\n          cache.inserted[name] = true\n        }\n        if (\n          // using === development instead of !== production\n          // because if people do ssr in tests, the source maps showing up would be annoying\n          process.env.NODE_ENV === 'development' &&\n          serialized.map !== undefined\n        ) {\n          return rules + serialized.map\n        }\n        return rules\n      } else {\n        // in compat mode, we put the styles on the inserted cache so\n        // that emotion-server can pull out the styles\n        // except when we don't want to cache it which was in Global but now\n        // is nowhere but we don't want to do a major right now\n        // and just in case we're going to leave the case here\n        // it's also not affecting client side bundle size\n        // so it's really not a big deal\n\n        if (shouldCache) {\n          cache.inserted[name] = rules\n        } else {\n          return rules\n        }\n      }\n    }\n  }\n\n  const cache: EmotionCache = {\n    key,\n    sheet: new StyleSheet({\n      key,\n      container: ((container: any): HTMLElement),\n      nonce: options.nonce,\n      speedy: options.speedy,\n      prepend: options.prepend,\n    }),\n    nonce: options.nonce,\n    inserted,\n    registered: {},\n    insert,\n  }\n\n  cache.sheet.hydrate(nodesToHydrate)\n\n  return cache\n}\n\nexport default createCache\n"],"names":["fixedElements","WeakMap","compat","element","type","parent","length","value","isImplicitRule","column","line","props","charCodeAt","get","set","points","rules","dealloc","parsed","index","character","token","peek","identifier","position","delimit","from","next","toRules","alloc","getRules","parentRules","i","k","j","replace","removeLabel","return","isImportRule","nullifyElement","children","incorrectImportAlarm","console","error","isPrependedWithRegularRules","isBrowser","document","getServerStylisCache","undefined","weakMemoize","memoize","cache","name","defaultStylisPlugins","prefixer","options","key","process","env","NODE_ENV","Error","ssrStyles","querySelectorAll","Array","prototype","forEach","call","node","head","appendChild","setAttribute","stylisPlugins","test","container","inserted","nodesToHydrate","insert","attrib","getAttribute","split","push","omnipresentPlugins","unsafePseudoClasses","match","prevElement","indexOf","isIgnoringComment","arr","unsafePseudoClass","createUnsafeSelectorsAlarm","currentSheet","finalizingPlugins","stringify","root","COMMENT","rulesheet","rule","serializer","middleware","concat","stylis","styles","serialize","compile","selector","serialized","sheet","shouldCache","map","serverStylisCache","StyleSheet","nonce","speedy","prepend","registered","hydrate"],"mappings":"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"}
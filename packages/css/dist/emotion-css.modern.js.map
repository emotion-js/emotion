{"version":3,"file":"emotion-css.modern.js","sources":["../src/create-instance.js","../src/index.js"],"sourcesContent":["// @flow\nimport createCache from '@emotion/cache'\nimport { serializeStyles } from '@emotion/serialize'\nimport {\n  insertStyles,\n  getRegisteredStyles,\n  type EmotionCache,\n  type SerializedStyles,\n} from '@emotion/utils'\n\nfunction insertWithoutScoping(cache, serialized: SerializedStyles) {\n  if (cache.inserted[serialized.name] === undefined) {\n    return cache.insert('', serialized, cache.sheet, true)\n  }\n}\n\nfunction merge(registered: Object, css: (*) => string, className: string) {\n  const registeredStyles = []\n  const rawClassName = getRegisteredStyles(\n    registered,\n    registeredStyles,\n    className\n  )\n\n  if (registeredStyles.length < 2) {\n    return className\n  }\n  return rawClassName + css(registeredStyles)\n}\n\nexport type Interpolation = any\nexport type Interpolations = Array<Interpolation>\n\ntype CreateStyles<ReturnValue> = (...args: Interpolations) => ReturnValue\n\ntype ClassNameArg =\n  | string\n  | boolean\n  | { [key: string]: boolean | void | null }\n  | Array<ClassNameArg>\n  | void\n  | null\n\ndeclare class StyleSheet {\n  insert(rule: string): void;\n  flush(): void;\n  speedy(newVal: boolean): void;\n  tags: Array<HTMLStyleElement>;\n  isSpeedy: number;\n  ctr: number;\n}\n\nexport type Emotion = {\n  css: CreateStyles<string>,\n  cx: (...classNames: Array<ClassNameArg>) => string,\n  flush: () => void,\n  hydrate: (ids: Array<string>) => void,\n  injectGlobal: CreateStyles<void>,\n  keyframes: CreateStyles<string>,\n  sheet: StyleSheet,\n  cache: EmotionCache,\n  merge: *,\n  getRegisteredStyles: *,\n}\n\nlet createEmotion = (options: *): Emotion => {\n  let cache = createCache(options)\n\n  // $FlowFixMe\n  cache.sheet.speedy = function (value: boolean) {\n    if (process.env.NODE_ENV !== 'production' && this.ctr !== 0) {\n      throw new Error('speedy must be changed before any rules are inserted')\n    }\n    this.isSpeedy = value\n  }\n  cache.compat = true\n\n  let css = (...args) => {\n    let serialized = serializeStyles(args, cache.registered, undefined)\n    insertStyles(cache, serialized, false)\n    return `${cache.key}-${serialized.name}`\n  }\n\n  let keyframes = (...args) => {\n    let serialized = serializeStyles(args, cache.registered)\n    let animation = `animation-${serialized.name}`\n    insertWithoutScoping(cache, {\n      name: serialized.name,\n      styles: `@keyframes ${animation}{${serialized.styles}}`,\n    })\n\n    return animation\n  }\n  let injectGlobal = (...args) => {\n    let serialized = serializeStyles(args, cache.registered)\n    insertWithoutScoping(cache, serialized)\n  }\n\n  let cx = (...args) => {\n    return merge(cache.registered, css, classnames(args))\n  }\n  return {\n    css,\n    cx,\n    injectGlobal,\n    keyframes,\n    hydrate(ids: Array<string>) {\n      ids.forEach((key) => {\n        cache.inserted[key] = true\n      })\n    },\n    flush() {\n      cache.registered = {}\n      cache.inserted = {}\n      cache.sheet.flush()\n    },\n    // $FlowFixMe\n    sheet: cache.sheet,\n    cache,\n    getRegisteredStyles: getRegisteredStyles.bind(null, cache.registered),\n    merge: merge.bind(null, cache.registered, css),\n  }\n}\n\nlet classnames = (args) => {\n  let cls = ''\n  for (let i = 0; i < args.length; i++) {\n    let arg = args[i]\n    if (arg == null) continue\n\n    let toAdd\n    switch (typeof arg) {\n      case 'boolean':\n        break\n      case 'object': {\n        if (Array.isArray(arg)) {\n          toAdd = classnames(arg)\n        } else {\n          toAdd = ''\n          for (const k in arg) {\n            if (arg[k] && k) {\n              toAdd && (toAdd += ' ')\n              toAdd += k\n            }\n          }\n        }\n        break\n      }\n      default: {\n        toAdd = arg\n      }\n    }\n    if (toAdd) {\n      cls && (cls += ' ')\n      cls += toAdd\n    }\n  }\n  return cls\n}\n\nexport default createEmotion\n","// @flow\nimport createEmotion from './create-instance'\n\nexport const {\n  flush,\n  hydrate,\n  cx,\n  merge,\n  getRegisteredStyles,\n  injectGlobal,\n  keyframes,\n  css,\n  sheet,\n  cache,\n} = createEmotion({ key: 'css' })\n"],"names":["insertWithoutScoping","cache","serialized","undefined","inserted","name","insert","sheet","merge","registered","css","className","registeredStyles","rawClassName","getRegisteredStyles","length","classnames","args","cls","i","toAdd","arg","Array","isArray","k","flush","hydrate","cx","injectGlobal","keyframes","options","createCache","key","speedy","value","process","env","NODE_ENV","this","ctr","Error","isSpeedy","compat","serializeStyles","insertStyles","animation","styles","ids","forEach","bind","createEmotion"],"mappings":"0JAUA,SAASA,EAAqBC,EAAOC,GACnC,QAAwCC,IAApCF,EAAMG,SAASF,EAAWG,MAC5B,OAAOJ,EAAMK,OAAO,GAAIJ,EAAYD,EAAMM,OAAO,GAIrD,SAASC,EAAMC,EAAoBC,EAAoBC,GACrD,MAAMC,EAAmB,GACnBC,EAAeC,EACnBL,EACAG,EACAD,GAGF,OAAIC,EAAiBG,OAAS,EACrBJ,EAEFE,EAAeH,EAAIE,GAsC5B,IA2DII,EAAcC,IAChB,IAAIC,EAAM,GACV,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAKF,OAAQI,IAAK,CACpC,IAGIC,EAHAC,EAAMJ,EAAKE,GACf,GAAW,MAAPE,EAAJ,CAGA,cAAeA,GACb,IAAK,UACH,MACF,IAAK,SACH,GAAIC,MAAMC,QAAQF,GAChBD,EAAQJ,EAAWK,OACd,CACLD,EAAQ,GACR,IAAK,MAAMI,KAAKH,EACVA,EAAIG,IAAMA,IACZJ,IAAUA,GAAS,KACnBA,GAASI,GAIf,MAEF,QACEJ,EAAQC,EAGRD,IACFF,IAAQA,GAAO,KACfA,GAAOE,IAGX,OAAOF,SC1JIO,MACXA,EADWC,QAEXA,EAFWC,GAGXA,QACAnB,EAJWM,oBAKXA,EALWc,aAMXA,EANWC,UAOXA,EAPWnB,IAQXA,EARWH,MASXA,EATWN,MAUXA,GDoDmB6B,CAAAA,IACnB,IAAI7B,EAAQ8B,ECpDI,CAAEC,IAAK,QDuDvB/B,EAAMM,MAAM0B,OAAS,SAAUC,GAC7B,GAA6B,eAAzBC,QAAQC,IAAIC,UAA0C,IAAbC,KAAKC,IAChD,UAAUC,MAAM,wDAElBF,KAAKG,SAAWP,GAElBjC,EAAMyC,QAAS,EAEf,IAAIhC,EAAM,IAAIO,KACZ,IAAIf,EAAayC,EAAgB1B,EAAMhB,EAAMQ,gBAAYN,GAEzD,OADAyC,EAAa3C,EAAOC,GAAY,GACxB,GAAED,EAAM+B,OAAO9B,EAAWG,QAqBpC,MAAO,CACLK,IAAAA,EACAiB,GALO,IAAIV,IACJT,EAAMP,EAAMQ,WAAYC,EAAKM,EAAWC,IAK/CW,aAXiB,IAAIX,KACrB,IAAIf,EAAayC,EAAgB1B,EAAMhB,EAAMQ,YAC7CT,EAAqBC,EAAOC,IAU5B2B,UAtBc,IAAIZ,KAClB,IAAIf,EAAayC,EAAgB1B,EAAMhB,EAAMQ,YACzCoC,EAAa,aAAY3C,EAAWG,OAMxC,OALAL,EAAqBC,EAAO,CAC1BI,KAAMH,EAAWG,KACjByC,OAAS,cAAaD,KAAa3C,EAAW4C,YAGzCD,GAePnB,QAAQqB,GACNA,EAAIC,QAAShB,IACX/B,EAAMG,SAAS4B,IAAO,KAG1BP,QACExB,EAAMQ,WAAa,GACnBR,EAAMG,SAAW,GACjBH,EAAMM,MAAMkB,SAGdlB,MAAON,EAAMM,MACbN,MAAAA,EACAa,oBAAqBA,EAAoBmC,KAAK,KAAMhD,EAAMQ,YAC1DD,MAAOA,EAAMyC,KAAK,KAAMhD,EAAMQ,WAAYC,KC1G1CwC"}
!(function (e, t) {
  'object' == typeof exports && 'undefined' != typeof module
    ? t(
        exports,
        require('@emotion/cache'),
        require('@emotion/serialize'),
        require('@emotion/utils')
      )
    : 'function' == typeof define && define.amd
    ? define([
        'exports',
        '@emotion/cache',
        '@emotion/serialize',
        '@emotion/utils',
      ], t)
    : t(((e || self).css = {}), e.createCache, e.serialize, e.utils)
})(this, function (e, t, r, i) {
  function s(e) {
    return e && 'object' == typeof e && 'default' in e ? e : { default: e }
  }
  var n = s(t)
  function a(e, t) {
    if (void 0 === e.inserted[t.name]) return e.insert('', t, e.sheet, !0)
  }
  function l(e, t, r) {
    var s = [],
      n = i.getRegisteredStyles(e, s, r)
    return s.length < 2 ? r : n + t(s)
  }
  var o = function e(t) {
      for (var r = '', i = 0; i < t.length; i++) {
        var s = t[i]
        if (null != s) {
          var n = void 0
          switch (typeof s) {
            case 'boolean':
              break
            case 'object':
              if (Array.isArray(s)) n = e(s)
              else
                for (var a in ((n = ''), s))
                  s[a] && a && (n && (n += ' '), (n += a))
              break
            default:
              n = s
          }
          n && (r && (r += ' '), (r += n))
        }
      }
      return r
    },
    c = (function (e) {
      var t = n.default({ key: 'css' })
      ;(t.sheet.speedy = function (e) {
        if ('production' !== process.env.NODE_ENV && 0 !== this.ctr)
          throw new Error(
            'speedy must be changed before any rules are inserted'
          )
        this.isSpeedy = e
      }),
        (t.compat = !0)
      var s = function () {
        var e = r.serializeStyles(
          [].slice.call(arguments),
          t.registered,
          void 0
        )
        return i.insertStyles(t, e, !1), t.key + '-' + e.name
      }
      return {
        css: s,
        cx: function () {
          return l(t.registered, s, o([].slice.call(arguments)))
        },
        injectGlobal: function () {
          var e = r.serializeStyles([].slice.call(arguments), t.registered)
          a(t, e)
        },
        keyframes: function () {
          var e = r.serializeStyles([].slice.call(arguments), t.registered),
            i = 'animation-' + e.name
          return (
            a(t, {
              name: e.name,
              styles: '@keyframes ' + i + '{' + e.styles + '}',
            }),
            i
          )
        },
        hydrate: function (e) {
          e.forEach(function (e) {
            t.inserted[e] = !0
          })
        },
        flush: function () {
          ;(t.registered = {}), (t.inserted = {}), t.sheet.flush()
        },
        sheet: t.sheet,
        cache: t,
        getRegisteredStyles: i.getRegisteredStyles.bind(null, t.registered),
        merge: l.bind(null, t.registered, s),
      }
    })(),
    f = c.flush,
    u = c.hydrate,
    d = c.cx,
    y = c.merge,
    h = c.getRegisteredStyles,
    g = c.injectGlobal,
    m = c.keyframes,
    v = c.css,
    b = c.sheet
  ;(e.cache = c.cache),
    (e.css = v),
    (e.cx = d),
    (e.flush = f),
    (e.getRegisteredStyles = h),
    (e.hydrate = u),
    (e.injectGlobal = g),
    (e.keyframes = m),
    (e.merge = y),
    (e.sheet = b)
})
//# sourceMappingURL=emotion-css.umd.min.js.map

{"version":3,"file":"emotion-utils.umd.js","sources":["../src/index.js"],"sourcesContent":["// @flow\nimport type { RegisteredCache, EmotionCache, SerializedStyles } from './types'\n\nconst isBrowser = typeof document !== 'undefined'\n\nexport function getRegisteredStyles(\n  registered: RegisteredCache,\n  registeredStyles: string[],\n  classNames: string\n) {\n  let rawClassName = ''\n\n  classNames.split(' ').forEach((className) => {\n    if (registered[className] !== undefined) {\n      registeredStyles.push(`${registered[className]};`)\n    } else {\n      rawClassName += `${className} `\n    }\n  })\n  return rawClassName\n}\n\nexport const insertStyles = (\n  cache: EmotionCache,\n  serialized: SerializedStyles,\n  isStringTag: boolean\n) => {\n  let className = `${cache.key}-${serialized.name}`\n  if (\n    // we only need to add the styles to the registered cache if the\n    // class name could be used further down\n    // the tree but if it's a string tag, we know it won't\n    // so we don't have to add it to registered cache.\n    // this improves memory usage since we can avoid storing the whole style string\n    (isStringTag === false ||\n      // we need to always store it if we're in compat mode and\n      // in node since emotion-server relies on whether a style is in\n      // the registered cache to know whether a style is global or not\n      // also, note that this check will be dead code eliminated in the browser\n      (isBrowser === false && cache.compat !== undefined)) &&\n    cache.registered[className] === undefined\n  ) {\n    cache.registered[className] = serialized.styles\n  }\n  if (cache.inserted[serialized.name] === undefined) {\n    let stylesForSSR = ''\n    let current = serialized\n    do {\n      let maybeStyles = cache.insert(\n        serialized === current ? `.${className}` : '',\n        current,\n        cache.sheet,\n        true\n      )\n      if (!isBrowser && maybeStyles !== undefined) {\n        stylesForSSR += maybeStyles\n      }\n      current = current.next\n    } while (current !== undefined)\n    if (!isBrowser && stylesForSSR.length !== 0) {\n      return stylesForSSR\n    }\n  }\n}\n\nexport * from './types'\n"],"names":["isBrowser","document","registered","registeredStyles","classNames","rawClassName","split","forEach","className","undefined","push","cache","serialized","isStringTag","key","name","compat","styles","inserted","stylesForSSR","current","maybeStyles","insert","sheet","next","length"],"mappings":"+NAGA,IAAMA,EAAgC,oBAAbC,wCAGvBC,EACAC,EACAC,GAEA,IAAIC,EAAe,GASnB,OAPAD,EAAWE,MAAM,KAAKC,QAAQ,SAACC,QACCC,IAA1BP,EAAWM,GACbL,EAAiBO,KAAQR,EAAWM,QAEpCH,GAAmBG,QAGhBH,kBAGmB,SAC1BM,EACAC,EACAC,GAEA,IAAIL,EAAeG,EAAMG,QAAOF,EAAWG,KAiB3C,KAVmB,IAAhBF,IAKgB,IAAdb,QAAwCS,IAAjBE,EAAMK,cACAP,IAAhCE,EAAMT,WAAWM,KAEjBG,EAAMT,WAAWM,GAAaI,EAAWK,aAEHR,IAApCE,EAAMO,SAASN,EAAWG,MAAqB,CACjD,IAAII,EAAe,GACfC,EAAUR,EACd,EAAG,CACD,IAAIS,EAAcV,EAAMW,OACtBV,IAAeQ,MAAcZ,EAAc,GAC3CY,EACAT,EAAMY,OACN,GAEGvB,QAA6BS,IAAhBY,IAChBF,GAAgBE,GAElBD,EAAUA,EAAQI,gBACCf,IAAZW,GACT,IAAKpB,GAAqC,IAAxBmB,EAAaM,OAC7B,OAAON"}
{"version":3,"file":"emotion-serialize.modern.js","sources":["../src/index.js"],"sourcesContent":["// @flow\nimport type {\n  Interpolation,\n  SerializedStyles,\n  RegisteredCache,\n} from '@emotion/utils'\nimport hashString from '@emotion/hash'\nimport unitless from '@emotion/unitless'\nimport memoize from '@emotion/memoize'\n\nconst ILLEGAL_ESCAPE_SEQUENCE_ERROR = `You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\\\00d7';\" should become \"content: '\\\\\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`\n\nconst UNDEFINED_AS_OBJECT_KEY_ERROR =\n  \"You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).\"\n\nlet hyphenateRegex = /[A-Z]|^ms/g\nlet animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g\n\nconst isCustomProperty = (property: string) => property.charCodeAt(1) === 45\nconst isProcessableValue = (value) =>\n  value != null && typeof value !== 'boolean'\n\nconst processStyleName = /* #__PURE__ */ memoize((styleName: string) =>\n  isCustomProperty(styleName)\n    ? styleName\n    : styleName.replace(hyphenateRegex, '-$&').toLowerCase()\n)\n\nlet processStyleValue = (\n  key: string,\n  value: string | number\n): string | number => {\n  switch (key) {\n    case 'animation':\n    case 'animationName': {\n      if (typeof value === 'string') {\n        return value.replace(animationRegex, (match, p1, p2) => {\n          cursor = {\n            name: p1,\n            styles: p2,\n            next: cursor,\n          }\n          return p1\n        })\n      }\n    }\n  }\n\n  if (\n    unitless[key] !== 1 &&\n    !isCustomProperty(key) &&\n    typeof value === 'number' &&\n    value !== 0\n  ) {\n    return value + 'px'\n  }\n  return value\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  let contentValuePattern = /(attr|calc|counters?|url)\\(/\n  let contentValues = [\n    'normal',\n    'none',\n    'counter',\n    'open-quote',\n    'close-quote',\n    'no-open-quote',\n    'no-close-quote',\n    'initial',\n    'inherit',\n    'unset',\n  ]\n\n  let oldProcessStyleValue = processStyleValue\n\n  let msPattern = /^-ms-/\n  let hyphenPattern = /-(.)/g\n\n  let hyphenatedCache = {}\n\n  processStyleValue = (key: string, value: string) => {\n    if (key === 'content') {\n      if (\n        typeof value !== 'string' ||\n        (contentValues.indexOf(value) === -1 &&\n          !contentValuePattern.test(value) &&\n          (value.charAt(0) !== value.charAt(value.length - 1) ||\n            (value.charAt(0) !== '\"' && value.charAt(0) !== \"'\")))\n      ) {\n        throw new Error(\n          `You seem to be using a value for 'content' without quotes, try replacing it with \\`content: '\"${value}\"'\\``\n        )\n      }\n    }\n\n    const processed = oldProcessStyleValue(key, value)\n\n    if (\n      processed !== '' &&\n      !isCustomProperty(key) &&\n      key.indexOf('-') !== -1 &&\n      hyphenatedCache[key] === undefined\n    ) {\n      hyphenatedCache[key] = true\n      console.error(\n        `Using kebab-case for css properties in objects is not supported. Did you mean ${key\n          .replace(msPattern, 'ms-')\n          .replace(hyphenPattern, (str, char) => char.toUpperCase())}?`\n      )\n    }\n\n    return processed\n  }\n}\n\nfunction handleInterpolation(\n  mergedProps: void | Object,\n  registered: RegisteredCache | void,\n  interpolation: Interpolation\n): string | number {\n  if (interpolation == null) {\n    return ''\n  }\n  if (interpolation.__emotion_styles !== undefined) {\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      interpolation.toString() === 'NO_COMPONENT_SELECTOR'\n    ) {\n      throw new Error(\n        'Component selectors can only be used in conjunction with @emotion/babel-plugin.'\n      )\n    }\n    return interpolation\n  }\n\n  switch (typeof interpolation) {\n    case 'boolean': {\n      return ''\n    }\n    case 'object': {\n      if (interpolation.anim === 1) {\n        cursor = {\n          name: interpolation.name,\n          styles: interpolation.styles,\n          next: cursor,\n        }\n\n        return interpolation.name\n      }\n      if (interpolation.styles !== undefined) {\n        let next = interpolation.next\n        if (next !== undefined) {\n          // not the most efficient thing ever but this is a pretty rare case\n          // and there will be very few iterations of this generally\n          while (next !== undefined) {\n            cursor = {\n              name: next.name,\n              styles: next.styles,\n              next: cursor,\n            }\n            next = next.next\n          }\n        }\n        let styles = `${interpolation.styles};`\n        if (\n          process.env.NODE_ENV !== 'production' &&\n          interpolation.map !== undefined\n        ) {\n          styles += interpolation.map\n        }\n\n        return styles\n      }\n\n      return createStringFromObject(mergedProps, registered, interpolation)\n    }\n    case 'function': {\n      if (mergedProps !== undefined) {\n        let previousCursor = cursor\n        let result = interpolation(mergedProps)\n        cursor = previousCursor\n\n        return handleInterpolation(mergedProps, registered, result)\n      } else if (process.env.NODE_ENV !== 'production') {\n        console.error(\n          'Functions that are interpolated in css calls will be stringified.\\n' +\n            'If you want to have a css call based on props, create a function that returns a css call like this\\n' +\n            'let dynamicStyle = (props) => css`color: ${props.color}`\\n' +\n            'It can be called directly with props or interpolated in a styled call like this\\n' +\n            \"let SomeComponent = styled('div')`${dynamicStyle}`\"\n        )\n      }\n      break\n    }\n    case 'string':\n      if (process.env.NODE_ENV !== 'production') {\n        const matched = []\n        const replaced = interpolation.replace(\n          animationRegex,\n          (match, p1, p2) => {\n            const fakeVarName = `animation${matched.length}`\n            matched.push(\n              `const ${fakeVarName} = keyframes\\`${p2.replace(\n                /^@keyframes animation-\\w+/,\n                ''\n              )}\\``\n            )\n            return `\\${${fakeVarName}}`\n          }\n        )\n        if (matched.length) {\n          console.error(\n            '`keyframes` output got interpolated into plain string, please wrap it with `css`.\\n\\n' +\n              'Instead of doing this:\\n\\n' +\n              [...matched, `\\`${replaced}\\``].join('\\n') +\n              '\\n\\nYou should wrap it with `css` like this:\\n\\n' +\n              `css\\`${replaced}\\``\n          )\n        }\n      }\n      break\n  }\n\n  // finalize string values (regular strings and functions interpolated into css calls)\n  if (registered == null) {\n    return interpolation\n  }\n  const cached = registered[interpolation]\n  return cached !== undefined ? cached : interpolation\n}\n\nfunction createStringFromObject(\n  mergedProps: void | Object,\n  registered: RegisteredCache | void,\n  obj: { [key: string]: Interpolation }\n): string {\n  let string = ''\n\n  if (Array.isArray(obj)) {\n    for (let i = 0; i < obj.length; i++) {\n      string += `${handleInterpolation(mergedProps, registered, obj[i])};`\n    }\n  } else {\n    for (let key in obj) {\n      let value = obj[key]\n      if (typeof value !== 'object') {\n        if (registered != null && registered[value] !== undefined) {\n          string += `${key}{${registered[value]}}`\n        } else if (isProcessableValue(value)) {\n          string += `${processStyleName(key)}:${processStyleValue(key, value)};`\n        }\n      } else {\n        if (\n          key === 'NO_COMPONENT_SELECTOR' &&\n          process.env.NODE_ENV !== 'production'\n        ) {\n          throw new Error(\n            'Component selectors can only be used in conjunction with @emotion/babel-plugin.'\n          )\n        }\n        if (\n          Array.isArray(value) &&\n          typeof value[0] === 'string' &&\n          (registered == null || registered[value[0]] === undefined)\n        ) {\n          for (let i = 0; i < value.length; i++) {\n            if (isProcessableValue(value[i])) {\n              string += `${processStyleName(key)}:${processStyleValue(\n                key,\n                value[i]\n              )};`\n            }\n          }\n        } else {\n          const interpolated = handleInterpolation(\n            mergedProps,\n            registered,\n            value\n          )\n          switch (key) {\n            case 'animation':\n            case 'animationName': {\n              string += `${processStyleName(key)}:${interpolated};`\n              break\n            }\n            default: {\n              if (\n                process.env.NODE_ENV !== 'production' &&\n                key === 'undefined'\n              ) {\n                console.error(UNDEFINED_AS_OBJECT_KEY_ERROR)\n              }\n              string += `${key}{${interpolated}}`\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return string\n}\n\nlet labelPattern = /label:\\s*([^\\s;\\n{]+)\\s*;/g\n\nlet sourceMapPattern\nif (process.env.NODE_ENV !== 'production') {\n  sourceMapPattern = /\\/\\*#\\ssourceMappingURL=data:application\\/json;\\S+\\s+\\*\\//g\n}\n\n// this is the cursor for keyframes\n// keyframes are stored on the SerializedStyles object as a linked list\nlet cursor\n\nexport const serializeStyles = function (\n  args: Array<Interpolation>,\n  registered: RegisteredCache | void,\n  mergedProps: void | Object\n): SerializedStyles {\n  if (\n    args.length === 1 &&\n    typeof args[0] === 'object' &&\n    args[0] !== null &&\n    args[0].styles !== undefined\n  ) {\n    return args[0]\n  }\n  let stringMode = true\n  let styles = ''\n\n  cursor = undefined\n  let strings = args[0]\n  if (strings == null || strings.raw === undefined) {\n    stringMode = false\n    styles += handleInterpolation(mergedProps, registered, strings)\n  } else {\n    if (process.env.NODE_ENV !== 'production' && strings[0] === undefined) {\n      console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR)\n    }\n    styles += strings[0]\n  }\n  // we start at 1 since we've already handled the first arg\n  for (let i = 1; i < args.length; i++) {\n    styles += handleInterpolation(mergedProps, registered, args[i])\n    if (stringMode) {\n      if (process.env.NODE_ENV !== 'production' && strings[i] === undefined) {\n        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR)\n      }\n      styles += strings[i]\n    }\n  }\n  let sourceMap\n\n  if (process.env.NODE_ENV !== 'production') {\n    styles = styles.replace(sourceMapPattern, (match) => {\n      sourceMap = match\n      return ''\n    })\n  }\n\n  // using a global regex with .exec is stateful so lastIndex has to be reset each time\n  labelPattern.lastIndex = 0\n  let identifierName = ''\n\n  let match\n  // https://esbench.com/bench/5b809c2cf2949800a0f61fb5\n  while ((match = labelPattern.exec(styles)) !== null) {\n    identifierName +=\n      '-' +\n      // $FlowFixMe we know it's not null\n      match[1]\n  }\n\n  let name = hashString(styles) + identifierName\n\n  if (process.env.NODE_ENV !== 'production') {\n    // $FlowFixMe SerializedStyles type doesn't have toString property (and we don't want to add it)\n    return {\n      name,\n      styles,\n      map: sourceMap,\n      next: cursor,\n      toString() {\n        return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"\n      },\n    }\n  }\n  return {\n    name,\n    styles,\n    next: cursor,\n  }\n}\n"],"names":["ILLEGAL_ESCAPE_SEQUENCE_ERROR","hyphenateRegex","animationRegex","isCustomProperty","property","charCodeAt","isProcessableValue","value","processStyleName","memoize","styleName","replace","toLowerCase","processStyleValue","key","match","p1","p2","cursor","name","styles","next","unitless","process","env","NODE_ENV","contentValuePattern","contentValues","oldProcessStyleValue","msPattern","hyphenPattern","hyphenatedCache","indexOf","test","charAt","length","Error","processed","undefined","console","error","str","char","toUpperCase","handleInterpolation","mergedProps","registered","interpolation","__emotion_styles","toString","anim","map","obj","string","Array","isArray","i","interpolated","createStringFromObject","previousCursor","result","matched","replaced","fakeVarName","push","join","cached","sourceMapPattern","labelPattern","serializeStyles","args","stringMode","sourceMap","strings","raw","lastIndex","identifierName","exec","hashString"],"mappings":"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"}